// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Member {
    id            Int     @id @default(autoincrement())
    name          String  @db.VarChar(20)
    gender        String  @db.VarChar(10)
    age           Int?
    address       String  @db.VarChar(40)
    detailAddress String  @map("spec_address") @db.VarChar(40)
    phoneNumber   String  @map("phone_num") @db.VarChar(13)
    status        String? @db.VarChar(15)
    inactiveDate  DateTime? @map("inactive_date") 
    socialType    String? @map("social_type") @db.VarChar(10)
    createdAt     DateTime? @map("created_at") @default(now())
    updatedAt     DateTime? @map("updated_at") @default(now())
    email         String   @unique @db.VarChar(50)
    point         Int?
    birth         DateTime @db.Date
 
    memberPrefers MemberPrefer[]
    memberMissions MemberMission[]
    reviews       Review[]

    @@map("member")
}

model FoodCategory {
    id            Int      @id @default(autoincrement())
    name          String   @db.VarChar(15)
    column4       String?  @map("Column4") @db.VarChar(15)
    memberPrefers MemberPrefer[]

    @@map("food_category")
}

model MemberPrefer {
    id           Int       @id @default(autoincrement())
    memberId     Int       @map("member_id")
    categoryId   Int       @map("category_id")
    createdAt    DateTime  @map("created_at") @default(now())
    updatedAt    DateTime  @map("updated_at") @default(now())

    member       Member         @relation(fields: [memberId], references: [id])
    category     FoodCategory   @relation(fields: [categoryId], references: [id])

    @@index([categoryId], map: "category_id")
    @@index([memberId], map: "member_id")
    @@map("member_prefer")
}
model Mission {
    id           Int       @id @default(autoincrement())
    storeId      Int       @map("store_id")
    reward       Int
    deadline     DateTime
    missionSpec  String    @map("mission_spec")
    createdAt    DateTime  @map("created_at") @default(now())
    updatedAt    DateTime  @map("updated_at") @default(now())

    store        Store     @relation(fields: [storeId], references: [id])

    memberMissions MemberMission[]

    @@map("mission")
}

model MemberMission {
    id          Int       @id @default(autoincrement())
    memberId    Int       @map("member_id")
    missionId   Int       @map("mission_id")
    status      String    @db.VarChar(15)
    createdAt   DateTime  @map("created_at") @default(now())
    updatedAt   DateTime  @map("updated_at") @default(now())

    member      Member    @relation(fields: [memberId], references: [id])
    mission     Mission   @relation(fields: [missionId], references: [id])

    @@map("member_mission")
    @@index([memberId], map: "member_id")
    @@index([missionId], map: "mission_id")
}

model Store {
    id         Int       @id @default(autoincrement())
    regionId   Int       @map("region_id")
    name       String    @db.VarChar(50)
    address    String    @db.VarChar(50)
    score      Float
    createdAt  DateTime  @map("created_at") @default(now())
    updatedAt  DateTime  @map("updated_at") @default(now())

    region     Region    @relation(fields: [regionId], references: [id])
    missions   Mission[] // Store와 Mission 간의 관계
    reviews       Review[]
    reviewImages ReviewImage[]

    @@map("store")

}
model Region {
    id         Int       @id @default(autoincrement())
    name       String    @db.VarChar(20)
    createdAt  DateTime  @map("created_at") @default(now())
    updatedAt  DateTime  @map("updated_at") @default(now())

    stores     Store[]   // Region과 Store 간의 관계

    @@map("region")
}

model Review {
  id        Int       @id @default(autoincrement())
  memberId  Int       @map("member_id")
  storeId   Int       @map("store_id")
  body      String    @db.Text
  score     Float
  createdAt DateTime  @map("created_at") @default(now())

  member    Member    @relation(fields: [memberId], references: [id])
  store     Store     @relation(fields: [storeId], references: [id])
  reviewImages ReviewImage[]

  @@map("review")
}

model ReviewImage {
  id        Int       @id @default(autoincrement())
  reviewId  Int       @map("review_id")
  storeId   Int       @map("store_id")
  imageUrl  String    @map("image_url") @db.Text
  createdAt DateTime  @map("created_at") @default(now())
  updatedAt DateTime  @map("updated_at") @default(now())

  review    Review    @relation(fields: [reviewId], references: [id])
  store     Store     @relation(fields: [storeId], references: [id])

  @@map("review_image")
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String   @db.Text 
  expiresAt DateTime @map("expires_at")

  @@map("session")
}